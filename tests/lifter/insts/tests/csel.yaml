tests:
- name: test_csel_1
  bytes: [0x20, 0x40, 0x82, 0x9a]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = bool.read_reg "n"
      nextln:   v1 = bool.icmp.eq v0, 0x1
      nextln:   jumpif v1, csel_positive_condition, csel_negative_condition
      check: block_4: // preds: csel_positive_condition csel_negative_condition
      check: csel_positive_condition: // preds: entry
      nextln:   v2 = i64.read_reg "x1"
      nextln:   i64.write_reg v2, "x0"
      nextln:   jump block_4
      check: csel_negative_condition: // preds: entry
      nextln:   v3 = i64.read_reg "x2"
      nextln:   i64.write_reg v3, "x0"
      nextln:   jump block_4
- name: test_csel_2
  bytes: [0x20, 0x20, 0x82, 0x9a]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = bool.read_reg "c"
      nextln:   v1 = bool.icmp.eq v0, 0x1
      nextln:   jumpif v1, csel_positive_condition, csel_negative_condition
      check: block_4: // preds: csel_positive_condition csel_negative_condition
      check: csel_positive_condition: // preds: entry
      nextln:   v2 = i64.read_reg "x1"
      nextln:   i64.write_reg v2, "x0"
      nextln:   jump block_4
      check: csel_negative_condition: // preds: entry
      nextln:   v3 = i64.read_reg "x2"
      nextln:   i64.write_reg v3, "x0"
      nextln:   jump block_4
- name: test_csel_3
  bytes: [0x20, 0x0, 0x82, 0x1a]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = bool.read_reg "z"
      nextln:   v1 = bool.icmp.eq v0, 0x1
      nextln:   jumpif v1, csel_positive_condition, csel_negative_condition
      check: block_4: // preds: csel_positive_condition csel_negative_condition
      check: csel_positive_condition: // preds: entry
      nextln:   v2 = i32.read_reg "x1"
      nextln:   i32.write_reg v2, "x0"
      nextln:   jump block_4
      check: csel_negative_condition: // preds: entry
      nextln:   v3 = i32.read_reg "x2"
      nextln:   i32.write_reg v3, "x0"
      nextln:   jump block_4
