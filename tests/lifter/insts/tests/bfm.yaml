tests:
- name: test_bfm_1
  bytes: [0x41, 0x78, 0x0c, 0x33]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i32.read_reg "x2"
      nextln:   v1 = i64.icmp.uge 0x1e, 0xc
      nextln:   jumpif v1, bfm_positive_condition, bfm_negative_condition
      check: block_4: // preds: bfm_positive_condition bfm_negative_condition
      check: bfm_positive_condition: // preds: entry
      nextln:   v2 = i32.add 0x1, 0x1e
      nextln:   v3 = i32.sub v2, 0xc
      nextln:   v4 = i32.lshl 0x1, v3
      nextln:   v5 = i32.sub v4, 0x1
      nextln:   v6 = i32.lshl v5, 0xc
      nextln:   v7 = i32.and v0, v6
      nextln:   v8 = i32.lshr v7, 0xc
      nextln:   v9 = i32.lshl 0x1, v3
      nextln:   v10 = i32.sub v9, 0x1
      nextln:   v11 = i32.bitwise_not v10
      nextln:   v12 = i32.and v0, v11
      nextln:   v13 = i32.or v8, v12
      nextln:   i32.write_reg v13, "x1"
      nextln:   jump block_4
      check: bfm_negative_condition: // preds: entry
      nextln:   v14 = i32.add 0x1, 0x1e
      nextln:   v15 = i32.lshl 0x1, v14
      nextln:   v16 = i32.sub v15, 0x1
      nextln:   v17 = i32.and v0, v16
      nextln:   v18 = i32.sub 0x20, 0xc
      nextln:   v19 = i32.lshl v17, v18
      nextln:   v20 = i32.lshl 0x1, v14
      nextln:   v21 = i32.sub v20, 0x1
      nextln:   v22 = i32.lshl v21, v18
      nextln:   v23 = i32.bitwise_not v22
      nextln:   v24 = i32.and v0, v23
      nextln:   v25 = i32.or v19, v24
      nextln:   i32.write_reg v25, "x1"
      nextln:   jump block_4
- name: test_bfm_2
  bytes: [0x41, 0x04, 0x41, 0xb3]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i64.icmp.uge 0x1, 0x1
      nextln:   jumpif v1, bfm_positive_condition, bfm_negative_condition
      check: block_4: // preds: bfm_positive_condition bfm_negative_condition
      check: bfm_positive_condition: // preds: entry
      nextln:   v2 = i64.add 0x1, 0x1
      nextln:   v3 = i64.sub v2, 0x1
      nextln:   v4 = i64.lshl 0x1, v3
      nextln:   v5 = i64.sub v4, 0x1
      nextln:   v6 = i64.lshl v5, 0x1
      nextln:   v7 = i64.and v0, v6
      nextln:   v8 = i64.lshr v7, 0x1
      nextln:   v9 = i64.lshl 0x1, v3
      nextln:   v10 = i64.sub v9, 0x1
      nextln:   v11 = i64.bitwise_not v10
      nextln:   v12 = i64.and v0, v11
      nextln:   v13 = i64.or v8, v12
      nextln:   i64.write_reg v13, "x1"
      nextln:   jump block_4
      check: bfm_negative_condition: // preds: entry
      nextln:   v14 = i64.add 0x1, 0x1
      nextln:   v15 = i64.lshl 0x1, v14
      nextln:   v16 = i64.sub v15, 0x1
      nextln:   v17 = i64.and v0, v16
      nextln:   v18 = i64.sub 0x40, 0x1
      nextln:   v19 = i64.lshl v17, v18
      nextln:   v20 = i64.lshl 0x1, v14
      nextln:   v21 = i64.sub v20, 0x1
      nextln:   v22 = i64.lshl v21, v18
      nextln:   v23 = i64.bitwise_not v22
      nextln:   v24 = i64.and v0, v23
      nextln:   v25 = i64.or v19, v24
      nextln:   i64.write_reg v25, "x1"
      nextln:   jump block_4
- name: test_bfm_3
  bytes: [0x41, 0xc8, 0x42, 0xb3]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i64.icmp.uge 0x32, 0x2
      nextln:   jumpif v1, bfm_positive_condition, bfm_negative_condition
      check: block_4: // preds: bfm_positive_condition bfm_negative_condition
      check: bfm_positive_condition: // preds: entry
      nextln:   v2 = i64.add 0x1, 0x32
      nextln:   v3 = i64.sub v2, 0x2
      nextln:   v4 = i64.lshl 0x1, v3
      nextln:   v5 = i64.sub v4, 0x1
      nextln:   v6 = i64.lshl v5, 0x2
      nextln:   v7 = i64.and v0, v6
      nextln:   v8 = i64.lshr v7, 0x2
      nextln:   v9 = i64.lshl 0x1, v3
      nextln:   v10 = i64.sub v9, 0x1
      nextln:   v11 = i64.bitwise_not v10
      nextln:   v12 = i64.and v0, v11
      nextln:   v13 = i64.or v8, v12
      nextln:   i64.write_reg v13, "x1"
      nextln:   jump block_4
      check: bfm_negative_condition: // preds: entry
      nextln:   v14 = i64.add 0x1, 0x32
      nextln:   v15 = i64.lshl 0x1, v14
      nextln:   v16 = i64.sub v15, 0x1
      nextln:   v17 = i64.and v0, v16
      nextln:   v18 = i64.sub 0x40, 0x2
      nextln:   v19 = i64.lshl v17, v18
      nextln:   v20 = i64.lshl 0x1, v14
      nextln:   v21 = i64.sub v20, 0x1
      nextln:   v22 = i64.lshl v21, v18
      nextln:   v23 = i64.bitwise_not v22
      nextln:   v24 = i64.and v0, v23
      nextln:   v25 = i64.or v19, v24
      nextln:   i64.write_reg v25, "x1"
      nextln:   jump block_4
