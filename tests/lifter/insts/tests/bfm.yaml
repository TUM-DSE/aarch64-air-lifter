tests:
- name: bfm_1
  bytes: [0x41, 0x78, 0x0c, 0x33]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i32.read_reg "x2"
      nextln:   v1 = i64.unsigned_from_bits 0x1e
      nextln:   v2 = i64.unsigned_from_bits 0xc
      nextln:   v3 = int.icmp.ge v1, v2
      nextln:   jumpif v3, bfm_positive_condition, bfm_negative_condition
      check: block_4: // preds: bfm_positive_condition bfm_negative_condition
      check: bfm_positive_condition: // preds: entry
      nextln:   v4 = i32.wrapping_add 0x1, 0x1e
      nextln:   v5 = i32.wrapping_sub v4, 0xc
      nextln:   v6 = i32.lshl 0x1, v5
      nextln:   v7 = i32.wrapping_sub v6, 0x1
      nextln:   v8 = i32.lshl v7, 0xc
      nextln:   v9 = i32.and v0, v8
      nextln:   v10 = i32.lshr v9, 0xc
      nextln:   v11 = i32.lshl 0x1, v5
      nextln:   v12 = i32.wrapping_sub v11, 0x1
      nextln:   v13 = i32.bitwise_not v12
      nextln:   v14 = i32.and v0, v13
      nextln:   v15 = i32.or v10, v14
      nextln:   i32.write_reg v15, "x1"
      nextln:   jump block_4
      check: bfm_negative_condition: // preds: entry
      nextln:   v16 = i32.wrapping_add 0x1, 0x1e
      nextln:   v17 = i32.lshl 0x1, v16
      nextln:   v18 = i32.wrapping_sub v17, 0x1
      nextln:   v19 = i32.and v0, v18
      nextln:   v20 = i32.wrapping_sub 0x20, 0xc
      nextln:   v21 = i32.lshl v19, v20
      nextln:   v22 = i32.lshl 0x1, v16
      nextln:   v23 = i32.wrapping_sub v22, 0x1
      nextln:   v24 = i32.lshl v23, v20
      nextln:   v25 = i32.bitwise_not v24
      nextln:   v26 = i32.and v0, v25
      nextln:   v27 = i32.or v21, v26
      nextln:   i32.write_reg v27, "x1"
      nextln:   jump block_4
- name: bfm_2
  bytes: [0x41, 0x04, 0x41, 0xb3]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i64.unsigned_from_bits 0x1
      nextln:   v2 = i64.unsigned_from_bits 0x1
      nextln:   v3 = int.icmp.ge v1, v2
      nextln:   jumpif v3, bfm_positive_condition, bfm_negative_condition
      check: block_4: // preds: bfm_positive_condition bfm_negative_condition
      check: bfm_positive_condition: // preds: entry
      nextln:   v4 = i64.wrapping_add 0x1, 0x1
      nextln:   v5 = i64.wrapping_sub v4, 0x1
      nextln:   v6 = i64.lshl 0x1, v5
      nextln:   v7 = i64.wrapping_sub v6, 0x1
      nextln:   v8 = i64.lshl v7, 0x1
      nextln:   v9 = i64.and v0, v8
      nextln:   v10 = i64.lshr v9, 0x1
      nextln:   v11 = i64.lshl 0x1, v5
      nextln:   v12 = i64.wrapping_sub v11, 0x1
      nextln:   v13 = i64.bitwise_not v12
      nextln:   v14 = i64.and v0, v13
      nextln:   v15 = i64.or v10, v14
      nextln:   i64.write_reg v15, "x1"
      nextln:   jump block_4
      check: bfm_negative_condition: // preds: entry
      nextln:   v16 = i64.wrapping_add 0x1, 0x1
      nextln:   v17 = i64.lshl 0x1, v16
      nextln:   v18 = i64.wrapping_sub v17, 0x1
      nextln:   v19 = i64.and v0, v18
      nextln:   v20 = i64.wrapping_sub 0x40, 0x1
      nextln:   v21 = i64.lshl v19, v20
      nextln:   v22 = i64.lshl 0x1, v16
      nextln:   v23 = i64.wrapping_sub v22, 0x1
      nextln:   v24 = i64.lshl v23, v20
      nextln:   v25 = i64.bitwise_not v24
      nextln:   v26 = i64.and v0, v25
      nextln:   v27 = i64.or v21, v26
      nextln:   i64.write_reg v27, "x1"
      nextln:   jump block_4
- name: bfm_3
  bytes: [0x41, 0xc8, 0x42, 0xb3]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i64.unsigned_from_bits 0x32
      nextln:   v2 = i64.unsigned_from_bits 0x2
      nextln:   v3 = int.icmp.ge v1, v2
      nextln:   jumpif v3, bfm_positive_condition, bfm_negative_condition
      check: block_4: // preds: bfm_positive_condition bfm_negative_condition
      check: bfm_positive_condition: // preds: entry
      nextln:   v4 = i64.wrapping_add 0x1, 0x32
      nextln:   v5 = i64.wrapping_sub v4, 0x2
      nextln:   v6 = i64.lshl 0x1, v5
      nextln:   v7 = i64.wrapping_sub v6, 0x1
      nextln:   v8 = i64.lshl v7, 0x2
      nextln:   v9 = i64.and v0, v8
      nextln:   v10 = i64.lshr v9, 0x2
      nextln:   v11 = i64.lshl 0x1, v5
      nextln:   v12 = i64.wrapping_sub v11, 0x1
      nextln:   v13 = i64.bitwise_not v12
      nextln:   v14 = i64.and v0, v13
      nextln:   v15 = i64.or v10, v14
      nextln:   i64.write_reg v15, "x1"
      nextln:   jump block_4
      check: bfm_negative_condition: // preds: entry
      nextln:   v16 = i64.wrapping_add 0x1, 0x32
      nextln:   v17 = i64.lshl 0x1, v16
      nextln:   v18 = i64.wrapping_sub v17, 0x1
      nextln:   v19 = i64.and v0, v18
      nextln:   v20 = i64.wrapping_sub 0x40, 0x2
      nextln:   v21 = i64.lshl v19, v20
      nextln:   v22 = i64.lshl 0x1, v16
      nextln:   v23 = i64.wrapping_sub v22, 0x1
      nextln:   v24 = i64.lshl v23, v20
      nextln:   v25 = i64.bitwise_not v24
      nextln:   v26 = i64.and v0, v25
      nextln:   v27 = i64.or v21, v26
      nextln:   i64.write_reg v27, "x1"
      nextln:   jump block_4
