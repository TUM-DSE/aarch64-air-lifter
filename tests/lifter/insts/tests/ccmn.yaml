tests:
- name: test_ccmn_1
  bytes: [0x03, 0x00, 0x41, 0xba]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = bool.read_reg "z"
      nextln:   v1 = bool.icmp.eq v0, 0x1
      nextln:   jumpif v1, ccmp_positive_condition, ccmp_negative_condition
      check: block_4: // preds: ccmp_positive_condition ccmp_negative_condition
      check: ccmp_positive_condition: // preds: entry
      nextln:   v2 = i64.read_reg "x0"
      nextln:   v3 = i64.read_reg "x1"
      nextln:   v4 = i64.add v2, v3
      nextln:   v5 = i64.add v4, 0x0
      nextln:   v6 = i64.icmp.eq v5, 0x0
      nextln:   bool.write_reg v6, "z"
      nextln:   v7 = i64.icmp.slt v5, 0x0
      nextln:   bool.write_reg v7, "n"
      nextln:   v8 = i64.icmp.ugt v2, v5
      nextln:   v9 = i64.icmp.ugt v3, v5
      nextln:   v10 = bool.or v8, v9
      nextln:   bool.write_reg v10, "c"
      nextln:   v11 = i64.icmp.slt v2, 0x0
      nextln:   v12 = i64.icmp.slt v3, 0x0
      nextln:   v13 = bool.icmp.eq v11, v12
      nextln:   v14 = bool.icmp.ne v11, v7
      nextln:   v15 = bool.and v13, v14
      nextln:   bool.write_reg v15, "v"
      nextln:   jump block_4
      check: ccmp_negative_condition: // preds: entry
      nextln:   v16 = i64.and 0x8, 0x3
      nextln:   v17 = i64.icmp.ne 0x0, v16
      nextln:   bool.write_reg v17, "n"
      nextln:   v18 = i64.and 0x4, 0x3
      nextln:   v19 = i64.icmp.ne 0x0, v18
      nextln:   bool.write_reg v19, "z"
      nextln:   v20 = i64.and 0x2, 0x3
      nextln:   v21 = i64.icmp.ne 0x0, v20
      nextln:   bool.write_reg v21, "c"
      nextln:   v22 = i64.and 0x1, 0x3
      nextln:   v23 = i64.icmp.ne 0x0, v22
      nextln:   bool.write_reg v23, "v"
      nextln:   jump block_4
- name: test_ccmn_2
  bytes: [0xc0, 0xe0, 0x46, 0xba]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = bool.and 0x1, 0x1
      nextln:   jumpif v0, ccmp_positive_condition, ccmp_negative_condition
      check: block_4: // preds: ccmp_positive_condition ccmp_negative_condition
      check: ccmp_positive_condition: // preds: entry
      nextln:   v1 = i64.read_reg "x6"
      nextln:   v2 = i64.read_reg "x6"
      nextln:   v3 = i64.add v1, v2
      nextln:   v4 = i64.add v3, 0x0
      nextln:   v5 = i64.icmp.eq v4, 0x0
      nextln:   bool.write_reg v5, "z"
      nextln:   v6 = i64.icmp.slt v4, 0x0
      nextln:   bool.write_reg v6, "n"
      nextln:   v7 = i64.icmp.ugt v1, v4
      nextln:   v8 = i64.icmp.ugt v2, v4
      nextln:   v9 = bool.or v7, v8
      nextln:   bool.write_reg v9, "c"
      nextln:   v10 = i64.icmp.slt v1, 0x0
      nextln:   v11 = i64.icmp.slt v2, 0x0
      nextln:   v12 = bool.icmp.eq v10, v11
      nextln:   v13 = bool.icmp.ne v10, v6
      nextln:   v14 = bool.and v12, v13
      nextln:   bool.write_reg v14, "v"
      nextln:   jump block_4
      check: ccmp_negative_condition: // preds: entry
      nextln:   v15 = i64.and 0x8, 0x0
      nextln:   v16 = i64.icmp.ne 0x0, v15
      nextln:   bool.write_reg v16, "n"
      nextln:   v17 = i64.and 0x4, 0x0
      nextln:   v18 = i64.icmp.ne 0x0, v17
      nextln:   bool.write_reg v18, "z"
      nextln:   v19 = i64.and 0x2, 0x0
      nextln:   v20 = i64.icmp.ne 0x0, v19
      nextln:   bool.write_reg v20, "c"
      nextln:   v21 = i64.and 0x1, 0x0
      nextln:   v22 = i64.icmp.ne 0x0, v21
      nextln:   bool.write_reg v22, "v"
      nextln:   jump block_4
- name: test_ccmn_3
  bytes: [0x04, 0x60, 0x42, 0x3a]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = bool.read_reg "v"
      nextln:   v1 = bool.icmp.eq v0, 0x1
      nextln:   jumpif v1, ccmp_positive_condition, ccmp_negative_condition
      check: block_4: // preds: ccmp_positive_condition ccmp_negative_condition
      check: ccmp_positive_condition: // preds: entry
      nextln:   v2 = i32.read_reg "x0"
      nextln:   v3 = i32.read_reg "x2"
      nextln:   v4 = i32.add v2, v3
      nextln:   v5 = i32.add v4, 0x0
      nextln:   v6 = i32.icmp.eq v5, 0x0
      nextln:   bool.write_reg v6, "z"
      nextln:   v7 = i32.icmp.slt v5, 0x0
      nextln:   bool.write_reg v7, "n"
      nextln:   v8 = i32.icmp.ugt v2, v5
      nextln:   v9 = i32.icmp.ugt v3, v5
      nextln:   v10 = bool.or v8, v9
      nextln:   bool.write_reg v10, "c"
      nextln:   v11 = i32.icmp.slt v2, 0x0
      nextln:   v12 = i32.icmp.slt v3, 0x0
      nextln:   v13 = bool.icmp.eq v11, v12
      nextln:   v14 = bool.icmp.ne v11, v7
      nextln:   v15 = bool.and v13, v14
      nextln:   bool.write_reg v15, "v"
      nextln:   jump block_4
      check: ccmp_negative_condition: // preds: entry
      nextln:   v16 = i32.and 0x8, 0x4
      nextln:   v17 = i32.icmp.ne 0x0, v16
      nextln:   bool.write_reg v17, "n"
      nextln:   v18 = i32.and 0x4, 0x4
      nextln:   v19 = i32.icmp.ne 0x0, v18
      nextln:   bool.write_reg v19, "z"
      nextln:   v20 = i32.and 0x2, 0x4
      nextln:   v21 = i32.icmp.ne 0x0, v20
      nextln:   bool.write_reg v21, "c"
      nextln:   v22 = i32.and 0x1, 0x4
      nextln:   v23 = i32.icmp.ne 0x0, v22
      nextln:   bool.write_reg v23, "v"
      nextln:   jump block_4
