tests:
- name: ccmn_1
  bytes: [0x03, 0x00, 0x41, 0xba]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = bool.read_reg "z"
      nextln:   v1 = bool.icmp.eq v0, 0x1
      nextln:   jumpif v1, ccmp_positive_condition, ccmp_negative_condition
      check: block_4: // preds: ccmp_positive_condition ccmp_negative_condition
      check: ccmp_positive_condition: // preds: entry
      nextln:   v2 = i64.read_reg "x0"
      nextln:   v3 = i64.read_reg "x1"
      nextln:   v4 = i64.wrapping_add v2, v3
      nextln:   v5 = i64.wrapping_add v4, 0x0
      nextln:   v6 = i64.icmp.eq v5, 0x0
      nextln:   bool.write_reg v6, "z"
      nextln:   v7 = i64.signed_from_bits v5
      nextln:   v8 = i64.signed_from_bits 0x0
      nextln:   v9 = int.icmp.lt v7, v8
      nextln:   bool.write_reg v9, "n"
      nextln:   v10 = i64.unsigned_from_bits v2
      nextln:   v11 = i64.unsigned_from_bits v5
      nextln:   v12 = int.icmp.gt v10, v11
      nextln:   v13 = i64.unsigned_from_bits v3
      nextln:   v14 = i64.unsigned_from_bits v5
      nextln:   v15 = int.icmp.gt v13, v14
      nextln:   v16 = bool.or v12, v15
      nextln:   bool.write_reg v16, "c"
      nextln:   v17 = i64.signed_from_bits v2
      nextln:   v18 = i64.signed_from_bits 0x0
      nextln:   v19 = int.icmp.lt v17, v18
      nextln:   v20 = i64.signed_from_bits v3
      nextln:   v21 = i64.signed_from_bits 0x0
      nextln:   v22 = int.icmp.lt v20, v21
      nextln:   v23 = bool.icmp.eq v19, v22
      nextln:   v24 = bool.icmp.ne v19, v9
      nextln:   v25 = bool.and v23, v24
      nextln:   bool.write_reg v25, "v"
      nextln:   jump block_4
      check: ccmp_negative_condition: // preds: entry
      nextln:   v26 = i64.and 0x8, 0x3
      nextln:   v27 = i64.icmp.ne 0x0, v26
      nextln:   bool.write_reg v27, "n"
      nextln:   v28 = i64.and 0x4, 0x3
      nextln:   v29 = i64.icmp.ne 0x0, v28
      nextln:   bool.write_reg v29, "z"
      nextln:   v30 = i64.and 0x2, 0x3
      nextln:   v31 = i64.icmp.ne 0x0, v30
      nextln:   bool.write_reg v31, "c"
      nextln:   v32 = i64.and 0x1, 0x3
      nextln:   v33 = i64.icmp.ne 0x0, v32
      nextln:   bool.write_reg v33, "v"
      nextln:   jump block_4
- name: ccmn_2
  bytes: [0xc0, 0xe0, 0x46, 0xba]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = bool.and 0x1, 0x1
      nextln:   jumpif v0, ccmp_positive_condition, ccmp_negative_condition
      check: block_4: // preds: ccmp_positive_condition ccmp_negative_condition
      check: ccmp_positive_condition: // preds: entry
      nextln:   v1 = i64.read_reg "x6"
      nextln:   v2 = i64.read_reg "x6"
      nextln:   v3 = i64.wrapping_add v1, v2
      nextln:   v4 = i64.wrapping_add v3, 0x0
      nextln:   v5 = i64.icmp.eq v4, 0x0
      nextln:   bool.write_reg v5, "z"
      nextln:   v6 = i64.signed_from_bits v4
      nextln:   v7 = i64.signed_from_bits 0x0
      nextln:   v8 = int.icmp.lt v6, v7
      nextln:   bool.write_reg v8, "n"
      nextln:   v9 = i64.unsigned_from_bits v1
      nextln:   v10 = i64.unsigned_from_bits v4
      nextln:   v11 = int.icmp.gt v9, v10
      nextln:   v12 = i64.unsigned_from_bits v2
      nextln:   v13 = i64.unsigned_from_bits v4
      nextln:   v14 = int.icmp.gt v12, v13
      nextln:   v15 = bool.or v11, v14
      nextln:   bool.write_reg v15, "c"
      nextln:   v16 = i64.signed_from_bits v1
      nextln:   v17 = i64.signed_from_bits 0x0
      nextln:   v18 = int.icmp.lt v16, v17
      nextln:   v19 = i64.signed_from_bits v2
      nextln:   v20 = i64.signed_from_bits 0x0
      nextln:   v21 = int.icmp.lt v19, v20
      nextln:   v22 = bool.icmp.eq v18, v21
      nextln:   v23 = bool.icmp.ne v18, v8
      nextln:   v24 = bool.and v22, v23
      nextln:   bool.write_reg v24, "v"
      nextln:   jump block_4
      check: ccmp_negative_condition: // preds: entry
      nextln:   v25 = i64.and 0x8, 0x0
      nextln:   v26 = i64.icmp.ne 0x0, v25
      nextln:   bool.write_reg v26, "n"
      nextln:   v27 = i64.and 0x4, 0x0
      nextln:   v28 = i64.icmp.ne 0x0, v27
      nextln:   bool.write_reg v28, "z"
      nextln:   v29 = i64.and 0x2, 0x0
      nextln:   v30 = i64.icmp.ne 0x0, v29
      nextln:   bool.write_reg v30, "c"
      nextln:   v31 = i64.and 0x1, 0x0
      nextln:   v32 = i64.icmp.ne 0x0, v31
      nextln:   bool.write_reg v32, "v"
      nextln:   jump block_4
- name: ccmn_3
  bytes: [0x04, 0x60, 0x42, 0x3a]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = bool.read_reg "v"
      nextln:   v1 = bool.icmp.eq v0, 0x1
      nextln:   jumpif v1, ccmp_positive_condition, ccmp_negative_condition
      check: block_4: // preds: ccmp_positive_condition ccmp_negative_condition
      check: ccmp_positive_condition: // preds: entry
      nextln:   v2 = i64.read_reg "x0"
      nextln:   v3 = i32.trunc_i64 v2
      nextln:   v4 = i64.read_reg "x2"
      nextln:   v5 = i32.trunc_i64 v4
      nextln:   v6 = i32.wrapping_add v3, v5
      nextln:   v7 = i32.wrapping_add v6, 0x0
      nextln:   v8 = i32.icmp.eq v7, 0x0
      nextln:   bool.write_reg v8, "z"
      nextln:   v9 = i32.signed_from_bits v7
      nextln:   v10 = i32.signed_from_bits 0x0
      nextln:   v11 = int.icmp.lt v9, v10
      nextln:   bool.write_reg v11, "n"
      nextln:   v12 = i32.unsigned_from_bits v3
      nextln:   v13 = i32.unsigned_from_bits v7
      nextln:   v14 = int.icmp.gt v12, v13
      nextln:   v15 = i32.unsigned_from_bits v5
      nextln:   v16 = i32.unsigned_from_bits v7
      nextln:   v17 = int.icmp.gt v15, v16
      nextln:   v18 = bool.or v14, v17
      nextln:   bool.write_reg v18, "c"
      nextln:   v19 = i32.signed_from_bits v3
      nextln:   v20 = i32.signed_from_bits 0x0
      nextln:   v21 = int.icmp.lt v19, v20
      nextln:   v22 = i32.signed_from_bits v5
      nextln:   v23 = i32.signed_from_bits 0x0
      nextln:   v24 = int.icmp.lt v22, v23
      nextln:   v25 = bool.icmp.eq v21, v24
      nextln:   v26 = bool.icmp.ne v21, v11
      nextln:   v27 = bool.and v25, v26
      nextln:   bool.write_reg v27, "v"
      nextln:   jump block_4
      check: ccmp_negative_condition: // preds: entry
      nextln:   v28 = i32.and 0x8, 0x4
      nextln:   v29 = i32.icmp.ne 0x0, v28
      nextln:   bool.write_reg v29, "n"
      nextln:   v30 = i32.and 0x4, 0x4
      nextln:   v31 = i32.icmp.ne 0x0, v30
      nextln:   bool.write_reg v31, "z"
      nextln:   v32 = i32.and 0x2, 0x4
      nextln:   v33 = i32.icmp.ne 0x0, v32
      nextln:   bool.write_reg v33, "c"
      nextln:   v34 = i32.and 0x1, 0x4
      nextln:   v35 = i32.icmp.ne 0x0, v34
      nextln:   bool.write_reg v35, "v"
      nextln:   jump block_4
