tests:
- name: csinc_1
  bytes: [0x20, 0x04, 0x82, 0x9a]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = bool.read_reg "z"
      nextln:   v1 = bool.icmp.bool.eq v0, 0x1
      nextln:   jumpif v1, csinc_positive_condition, csinc_negative_condition
      check: block_4: // preds: csinc_positive_condition csinc_negative_condition
      check: csinc_positive_condition: // preds: entry
      nextln:   v2 = i64.read_reg "x1"
      nextln:   write_reg.i64 v2, "x0"
      nextln:   jump block_4
      check: csinc_negative_condition: // preds: entry
      nextln:   v3 = i64.read_reg "x2"
      nextln:   v4 = i64.wrapping_add v3, 0x1
      nextln:   write_reg.i64 v4, "x0"
      nextln:   jump block_4
- name: csinc_2
  bytes: [0x20, 0x04, 0x84, 0x1a]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = bool.read_reg "z"
      nextln:   v1 = bool.icmp.bool.eq v0, 0x1
      nextln:   jumpif v1, csinc_positive_condition, csinc_negative_condition
      check: block_4: // preds: csinc_positive_condition csinc_negative_condition
      check: csinc_positive_condition: // preds: entry
      nextln:   v2 = i64.read_reg "x1"
      nextln:   v3 = i32.trunc.i64 v2
      nextln:   write_reg.i32 v3, "x0"
      nextln:   jump block_4
      check: csinc_negative_condition: // preds: entry
      nextln:   v4 = i64.read_reg "x4"
      nextln:   v5 = i32.trunc.i64 v4
      nextln:   v6 = i32.wrapping_add v5, 0x1
      nextln:   write_reg.i32 v6, "x0"
      nextln:   jump block_4
- name: csinc_3
  bytes: [0x62, 0xd4, 0x84, 0x9a]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = bool.read_reg "z"
      nextln:   v1 = bool.read_reg "n"
      nextln:   v2 = bool.read_reg "v"
      nextln:   v3 = bool.icmp.bool.eq v0, 0x1
      nextln:   v4 = bool.icmp.bool.ne v1, v2
      nextln:   v5 = bool.or v3, v4
      nextln:   jumpif v5, csinc_positive_condition, csinc_negative_condition
      check: block_4: // preds: csinc_positive_condition csinc_negative_condition
      check: csinc_positive_condition: // preds: entry
      nextln:   v6 = i64.read_reg "x3"
      nextln:   write_reg.i64 v6, "x2"
      nextln:   jump block_4
      check: csinc_negative_condition: // preds: entry
      nextln:   v7 = i64.read_reg "x4"
      nextln:   v8 = i64.wrapping_add v7, 0x1
      nextln:   write_reg.i64 v8, "x2"
      nextln:   jump block_4
