tests:
- name: adcs_1
  bytes: [0x21, 0x00, 0x00, 0xba]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i64.read_reg "x0"
      nextln:   v2 = bool.read_reg "c"
      nextln:   v3 = i64.wrapping_add v0, v2
      nextln:   v4 = i64.wrapping_add v3, v1
      nextln:   i64.write_reg v4, "x1"
      nextln:   v5 = i64.wrapping_add v0, v1
      nextln:   v6 = i64.wrapping_add v5, v2
      nextln:   v7 = i64.icmp.eq v6, 0x0
      nextln:   bool.write_reg v7, "z"
      nextln:   v8 = i64.signed_from_bits v6
      nextln:   v9 = i64.signed_from_bits 0x0
      nextln:   v10 = int.icmp.lt v8, v9
      nextln:   bool.write_reg v10, "n"
      nextln:   v11 = i64.unsigned_from_bits v0
      nextln:   v12 = i64.unsigned_from_bits v6
      nextln:   v13 = int.icmp.gt v11, v12
      nextln:   v14 = i64.unsigned_from_bits v1
      nextln:   v15 = i64.unsigned_from_bits v6
      nextln:   v16 = int.icmp.gt v14, v15
      nextln:   v17 = bool.or v13, v16
      nextln:   bool.write_reg v17, "c"
      nextln:   v18 = i64.signed_from_bits v0
      nextln:   v19 = i64.signed_from_bits 0x0
      nextln:   v20 = int.icmp.lt v18, v19
      nextln:   v21 = i64.signed_from_bits v1
      nextln:   v22 = i64.signed_from_bits 0x0
      nextln:   v23 = int.icmp.lt v21, v22
      nextln:   v24 = bool.icmp.eq v20, v23
      nextln:   v25 = bool.icmp.ne v20, v10
      nextln:   v26 = bool.and v24, v25
      nextln:   bool.write_reg v26, "v"
- name: adcs_2
  bytes: [0x21, 0x00, 0x00, 0x3a]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i32.trunc_i64 v0
      nextln:   v2 = i64.read_reg "x0"
      nextln:   v3 = i32.trunc_i64 v2
      nextln:   v4 = bool.read_reg "c"
      nextln:   v5 = i32.wrapping_add v1, v4
      nextln:   v6 = i32.wrapping_add v5, v3
      nextln:   i32.write_reg v6, "x1"
      nextln:   v7 = i32.wrapping_add v1, v3
      nextln:   v8 = i32.wrapping_add v7, v4
      nextln:   v9 = i32.icmp.eq v8, 0x0
      nextln:   bool.write_reg v9, "z"
      nextln:   v10 = i32.signed_from_bits v8
      nextln:   v11 = i32.signed_from_bits 0x0
      nextln:   v12 = int.icmp.lt v10, v11
      nextln:   bool.write_reg v12, "n"
      nextln:   v13 = i32.unsigned_from_bits v1
      nextln:   v14 = i32.unsigned_from_bits v8
      nextln:   v15 = int.icmp.gt v13, v14
      nextln:   v16 = i32.unsigned_from_bits v3
      nextln:   v17 = i32.unsigned_from_bits v8
      nextln:   v18 = int.icmp.gt v16, v17
      nextln:   v19 = bool.or v15, v18
      nextln:   bool.write_reg v19, "c"
      nextln:   v20 = i32.signed_from_bits v1
      nextln:   v21 = i32.signed_from_bits 0x0
      nextln:   v22 = int.icmp.lt v20, v21
      nextln:   v23 = i32.signed_from_bits v3
      nextln:   v24 = i32.signed_from_bits 0x0
      nextln:   v25 = int.icmp.lt v23, v24
      nextln:   v26 = bool.icmp.eq v22, v25
      nextln:   v27 = bool.icmp.ne v22, v12
      nextln:   v28 = bool.and v26, v27
      nextln:   bool.write_reg v28, "v"
