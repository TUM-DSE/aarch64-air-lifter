tests:
- name: csinv_1
  bytes: [0x41, 0xa0, 0x83, 0x5a]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = bool.read_reg "n"
      nextln:   v1 = bool.read_reg "v"
      nextln:   v2 = bool.icmp.eq v0, v1
      nextln:   jumpif v2, csinv_positive_condition, csinv_negative_condition
      check: block_4: // preds: csinv_positive_condition csinv_negative_condition
      check: csinv_positive_condition: // preds: entry
      nextln:   v3 = i64.read_reg "x2"
      nextln:   v4 = i32.trunc_i64 v3
      nextln:   i32.write_reg v4, "x1"
      nextln:   jump block_4
      check: csinv_negative_condition: // preds: entry
      nextln:   v5 = i64.read_reg "x3"
      nextln:   v6 = i32.trunc_i64 v5
      nextln:   v7 = i32.bitwise_not v6
      nextln:   i32.write_reg v7, "x1"
      nextln:   jump block_4
- name: csinv_2
  bytes: [0x41, 0xa0, 0x83, 0xda]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = bool.read_reg "n"
      nextln:   v1 = bool.read_reg "v"
      nextln:   v2 = bool.icmp.eq v0, v1
      nextln:   jumpif v2, csinv_positive_condition, csinv_negative_condition
      check: block_4: // preds: csinv_positive_condition csinv_negative_condition
      check: csinv_positive_condition: // preds: entry
      nextln:   v3 = i64.read_reg "x2"
      nextln:   i64.write_reg v3, "x1"
      nextln:   jump block_4
      check: csinv_negative_condition: // preds: entry
      nextln:   v4 = i64.read_reg "x3"
      nextln:   v5 = i64.bitwise_not v4
      nextln:   i64.write_reg v5, "x1"
      nextln:   jump block_4
- name: csinv_3
  bytes: [0x21, 0x30, 0x82, 0xda]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = bool.read_reg "c"
      nextln:   v1 = bool.icmp.ne v0, 0x1
      nextln:   jumpif v1, csinv_positive_condition, csinv_negative_condition
      check: block_4: // preds: csinv_positive_condition csinv_negative_condition
      check: csinv_positive_condition: // preds: entry
      nextln:   v2 = i64.read_reg "x1"
      nextln:   i64.write_reg v2, "x1"
      nextln:   jump block_4
      check: csinv_negative_condition: // preds: entry
      nextln:   v3 = i64.read_reg "x2"
      nextln:   v4 = i64.bitwise_not v3
      nextln:   i64.write_reg v4, "x1"
      nextln:   jump block_4
