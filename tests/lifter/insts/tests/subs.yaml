tests:
- name: subs_1
  bytes: [0x21, 0x00, 0x00, 0xeb]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i64.read_reg "x0"
      nextln:   v2 = i64.wrapping_sub v0, v1
      nextln:   write_reg.i64 v2, "x1"
      nextln:   v3 = i64.bitwise_not v1
      nextln:   v4 = i64.wrapping_add v0, v3
      nextln:   v5 = i64.wrapping_add v4, 0x1
      nextln:   v6 = bool.icmp.i64.eq v5, 0x0
      nextln:   write_reg.bool v6, "z"
      nextln:   v7 = i64.signed_from_bits v5
      nextln:   v8 = i64.signed_from_bits 0x0
      nextln:   v9 = bool.icmp.int.lt v7, v8
      nextln:   write_reg.bool v9, "n"
      nextln:   v10 = i64.unsigned_from_bits v0
      nextln:   v11 = i64.unsigned_from_bits v5
      nextln:   v12 = bool.icmp.int.gt v10, v11
      nextln:   v13 = i64.unsigned_from_bits v3
      nextln:   v14 = i64.unsigned_from_bits v5
      nextln:   v15 = bool.icmp.int.gt v13, v14
      nextln:   v16 = bool.or v12, v15
      nextln:   write_reg.bool v16, "c"
      nextln:   v17 = i64.signed_from_bits v0
      nextln:   v18 = i64.signed_from_bits 0x0
      nextln:   v19 = bool.icmp.int.lt v17, v18
      nextln:   v20 = i64.signed_from_bits v3
      nextln:   v21 = i64.signed_from_bits 0x0
      nextln:   v22 = bool.icmp.int.lt v20, v21
      nextln:   v23 = bool.icmp.bool.eq v19, v22
      nextln:   v24 = bool.icmp.bool.ne v19, v9
      nextln:   v25 = bool.and v23, v24
      nextln:   write_reg.bool v25, "v"
- name: subs_2
  bytes: [0x21, 0x00, 0x00, 0x6b]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i32.trunc.i64 v0
      nextln:   v2 = i64.read_reg "x0"
      nextln:   v3 = i32.wrapping_sub v1, v2
      nextln:   write_reg.i32 v3, "x1"
      nextln:   v4 = i32.bitwise_not v2
      nextln:   v5 = i32.wrapping_add v1, v4
      nextln:   v6 = i32.wrapping_add v5, 0x1
      nextln:   v7 = bool.icmp.i32.eq v6, 0x0
      nextln:   write_reg.bool v7, "z"
      nextln:   v8 = i32.signed_from_bits v6
      nextln:   v9 = i32.signed_from_bits 0x0
      nextln:   v10 = bool.icmp.int.lt v8, v9
      nextln:   write_reg.bool v10, "n"
      nextln:   v11 = i32.unsigned_from_bits v1
      nextln:   v12 = i32.unsigned_from_bits v6
      nextln:   v13 = bool.icmp.int.gt v11, v12
      nextln:   v14 = i32.unsigned_from_bits v4
      nextln:   v15 = i32.unsigned_from_bits v6
      nextln:   v16 = bool.icmp.int.gt v14, v15
      nextln:   v17 = bool.or v13, v16
      nextln:   write_reg.bool v17, "c"
      nextln:   v18 = i32.signed_from_bits v1
      nextln:   v19 = i32.signed_from_bits 0x0
      nextln:   v20 = bool.icmp.int.lt v18, v19
      nextln:   v21 = i32.signed_from_bits v4
      nextln:   v22 = i32.signed_from_bits 0x0
      nextln:   v23 = bool.icmp.int.lt v21, v22
      nextln:   v24 = bool.icmp.bool.eq v20, v23
      nextln:   v25 = bool.icmp.bool.ne v20, v10
      nextln:   v26 = bool.and v24, v25
      nextln:   write_reg.bool v26, "v"
