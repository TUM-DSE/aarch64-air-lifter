tests:
- name: subs_1
  bytes: [0x21, 0x00, 0x00, 0xeb]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i64.read_reg "x0"
      nextln:   v2 = i64.sub v0, v1
      nextln:   i64.write_reg v2, "x1"
      nextln:   v3 = i64.bitwise_not v1
      nextln:   v4 = i64.add v0, v3
      nextln:   v5 = i64.add v4, 0x1
      nextln:   v6 = i64.icmp.eq v5, 0x0
      nextln:   bool.write_reg v6, "z"
      nextln:   v7 = i64.icmp.slt v5, 0x0
      nextln:   bool.write_reg v7, "n"
      nextln:   v8 = i64.icmp.ugt v0, v5
      nextln:   v9 = i64.icmp.ugt v3, v5
      nextln:   v10 = bool.or v8, v9
      nextln:   bool.write_reg v10, "c"
      nextln:   v11 = i64.icmp.slt v0, 0x0
      nextln:   v12 = i64.icmp.slt v3, 0x0
      nextln:   v13 = bool.icmp.eq v11, v12
      nextln:   v14 = bool.icmp.ne v11, v7
      nextln:   v15 = bool.and v13, v14
      nextln:   bool.write_reg v15, "v"
- name: subs_2
  bytes: [0x21, 0x00, 0x00, 0x6b]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i32.read_reg "x1"
      nextln:   v1 = i32.read_reg "x0"
      nextln:   v2 = i32.sub v0, v1
      nextln:   i32.write_reg v2, "x1"
      nextln:   v3 = i32.bitwise_not v1
      nextln:   v4 = i32.add v0, v3
      nextln:   v5 = i32.add v4, 0x1
      nextln:   v6 = i32.icmp.eq v5, 0x0
      nextln:   bool.write_reg v6, "z"
      nextln:   v7 = i32.icmp.slt v5, 0x0
      nextln:   bool.write_reg v7, "n"
      nextln:   v8 = i32.icmp.ugt v0, v5
      nextln:   v9 = i32.icmp.ugt v3, v5
      nextln:   v10 = bool.or v8, v9
      nextln:   bool.write_reg v10, "c"
      nextln:   v11 = i32.icmp.slt v0, 0x0
      nextln:   v12 = i32.icmp.slt v3, 0x0
      nextln:   v13 = bool.icmp.eq v11, v12
      nextln:   v14 = bool.icmp.ne v11, v7
      nextln:   v15 = bool.and v13, v14
      nextln:   bool.write_reg v15, "v"
