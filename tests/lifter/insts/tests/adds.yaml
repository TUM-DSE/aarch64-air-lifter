tests:
- name: add_1
  bytes: [0x21, 0x00, 0x00, 0xab]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i64.read_reg "x0"
      nextln:   v2 = i64.wrapping_add v0, v1
      nextln:   i64.write_reg v2, "x1"
      nextln:   v3 = i64.add v0, v1
      nextln:   v4 = i64.add v3, 0x0
      nextln:   v5 = i64.icmp.eq v4, 0x0
      nextln:   bool.write_reg v5, "z"
      nextln:   v6 = i64.icmp.slt v4, 0x0
      nextln:   bool.write_reg v6, "n"
      nextln:   v7 = i64.icmp.ugt v0, v4
      nextln:   v8 = i64.icmp.ugt v1, v4
      nextln:   v9 = bool.or v7, v8
      nextln:   bool.write_reg v9, "c"
      nextln:   v10 = i64.icmp.slt v0, 0x0
      nextln:   v11 = i64.icmp.slt v1, 0x0
      nextln:   v12 = bool.icmp.eq v10, v11
      nextln:   v13 = bool.icmp.ne v10, v6
      nextln:   v14 = bool.and v12, v13
      nextln:   bool.write_reg v14, "v"
- name: add_2
  bytes: [0x21, 0x00, 0x00, 0x2b]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i32.read_reg "x1"
      nextln:   v1 = i32.read_reg "x0"
      nextln:   v2 = i32.wrapping_add v0, v1
      nextln:   i32.write_reg v2, "x1"
      nextln:   v3 = i32.add v0, v1
      nextln:   v4 = i32.add v3, 0x0
      nextln:   v5 = i32.icmp.eq v4, 0x0
      nextln:   bool.write_reg v5, "z"
      nextln:   v6 = i32.icmp.slt v4, 0x0
      nextln:   bool.write_reg v6, "n"
      nextln:   v7 = i32.icmp.ugt v0, v4
      nextln:   v8 = i32.icmp.ugt v1, v4
      nextln:   v9 = bool.or v7, v8
      nextln:   bool.write_reg v9, "c"
      nextln:   v10 = i32.icmp.slt v0, 0x0
      nextln:   v11 = i32.icmp.slt v1, 0x0
      nextln:   v12 = bool.icmp.eq v10, v11
      nextln:   v13 = bool.icmp.ne v10, v6
      nextln:   v14 = bool.and v12, v13
      nextln:   bool.write_reg v14, "v"
