tests:
- name: test_add_1
  bytes: [0x21, 0x0, 0x0, 0xab]
  directives: |
      check: entry(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64, v6: i64, v7: i64, v8: i64, v9: i64, v10: i64, v11: i64, v12: i64, v13: i64, v14: i64, v15: i64, v16: i64, v17: i64, v18: i64, v19: i64, v20: i64, v21: i64, v22: i64, v23: i64, v24: i64, v25: i64, v26: i64, v27: i64, v28: i64, v29: i64, v30: i64, v31: i64, v32: i64, v33: i1, v34: i1, v35: i1, v36: i1): // entry block
      nextln:   v37 = i64.read_reg "x1"
      nextln:   v38 = i64.read_reg "x0"
      nextln:   v39 = i64.add v37, v38
      nextln:   i64.write_reg v39, "x1"
      nextln:   v40 = i64.add v37, v38
      nextln:   v41 = i64.add v40, 0x0
      nextln:   v42 = i64.icmp.eq v41, 0x0
      nextln:   i1.write_reg v42, "z"
      nextln:   v43 = i64.icmp.slt v41, 0x0
      nextln:   i1.write_reg v43, "n"
      nextln:   v44 = i64.icmp.ugt v37, v41
      nextln:   v45 = i64.icmp.ugt v38, v41
      nextln:   v46 = i1.or v44, v45
      nextln:   i1.write_reg v46, "c"
      nextln:   v47 = i64.icmp.slt v37, 0x0
      nextln:   v48 = i64.icmp.slt v38, 0x0
      nextln:   v49 = i1.icmp.eq v47, v48
      nextln:   v50 = i1.icmp.ne v47, v43
      nextln:   v51 = i1.and v49, v50
      nextln:   i1.write_reg v51, "v"
- name: test_add_2
  bytes: [0x21, 0x0, 0x0, 0x2b]
  directives: |
      check: entry(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64, v6: i64, v7: i64, v8: i64, v9: i64, v10: i64, v11: i64, v12: i64, v13: i64, v14: i64, v15: i64, v16: i64, v17: i64, v18: i64, v19: i64, v20: i64, v21: i64, v22: i64, v23: i64, v24: i64, v25: i64, v26: i64, v27: i64, v28: i64, v29: i64, v30: i64, v31: i64, v32: i64, v33: i1, v34: i1, v35: i1, v36: i1): // entry block
      nextln:   v37 = i32.read_reg "x1"
      nextln:   v38 = i32.read_reg "x0"
      nextln:   v39 = i32.add v37, v38
      nextln:   i32.write_reg v39, "x1"
      nextln:   v40 = i32.add v37, v38
      nextln:   v41 = i32.add v40, 0x0
      nextln:   v42 = i32.icmp.eq v41, 0x0
      nextln:   i1.write_reg v42, "z"
      nextln:   v43 = i32.icmp.slt v41, 0x0
      nextln:   i1.write_reg v43, "n"
      nextln:   v44 = i32.icmp.ugt v37, v41
      nextln:   v45 = i32.icmp.ugt v38, v41
      nextln:   v46 = i1.or v44, v45
      nextln:   i1.write_reg v46, "c"
      nextln:   v47 = i32.icmp.slt v37, 0x0
      nextln:   v48 = i32.icmp.slt v38, 0x0
      nextln:   v49 = i1.icmp.eq v47, v48
      nextln:   v50 = i1.icmp.ne v47, v43
      nextln:   v51 = i1.and v49, v50
      nextln:   i1.write_reg v51, "v"
