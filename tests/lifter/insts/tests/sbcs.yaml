tests:
- name: sbcs_1
  bytes: [0x41, 0x00, 0x03, 0x7a]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i32.trunc.i64 v0
      nextln:   v2 = i64.read_reg "x3"
      nextln:   v3 = i32.trunc.i64 v2
      nextln:   v4 = bool.read_reg "c"
      nextln:   v5 = bool.bitwise_not v4
      nextln:   v6 = i32.wrapping_sub v1, v3
      nextln:   v7 = i32.wrapping_sub v6, v5
      nextln:   write_reg.i32 v7, "x1"
      nextln:   v8 = bool.read_reg "c"
      nextln:   v9 = i32.wrapping_add v1, v3
      nextln:   v10 = i32.wrapping_add v9, v8
      nextln:   v11 = bool.icmp.i32.eq v10, 0x0
      nextln:   write_reg.bool v11, "z"
      nextln:   v12 = i32.signed_from_bits v10
      nextln:   v13 = i32.signed_from_bits 0x0
      nextln:   v14 = bool.icmp.int.lt v12, v13
      nextln:   write_reg.bool v14, "n"
      nextln:   v15 = i32.unsigned_from_bits v1
      nextln:   v16 = i32.unsigned_from_bits v10
      nextln:   v17 = bool.icmp.int.gt v15, v16
      nextln:   v18 = i32.unsigned_from_bits v3
      nextln:   v19 = i32.unsigned_from_bits v10
      nextln:   v20 = bool.icmp.int.gt v18, v19
      nextln:   v21 = bool.or v17, v20
      nextln:   write_reg.bool v21, "c"
      nextln:   v22 = i32.signed_from_bits v1
      nextln:   v23 = i32.signed_from_bits 0x0
      nextln:   v24 = bool.icmp.int.lt v22, v23
      nextln:   v25 = i32.signed_from_bits v3
      nextln:   v26 = i32.signed_from_bits 0x0
      nextln:   v27 = bool.icmp.int.lt v25, v26
      nextln:   v28 = bool.icmp.bool.eq v24, v27
      nextln:   v29 = bool.icmp.bool.ne v24, v14
      nextln:   v30 = bool.and v28, v29
      nextln:   write_reg.bool v30, "v"
- name: sbcs_2
  bytes: [0x41, 0x00, 0x03, 0xfa]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i64.read_reg "x3"
      nextln:   v2 = bool.read_reg "c"
      nextln:   v3 = bool.bitwise_not v2
      nextln:   v4 = i64.wrapping_sub v0, v1
      nextln:   v5 = i64.wrapping_sub v4, v3
      nextln:   write_reg.i64 v5, "x1"
      nextln:   v6 = bool.read_reg "c"
      nextln:   v7 = i64.wrapping_add v0, v1
      nextln:   v8 = i64.wrapping_add v7, v6
      nextln:   v9 = bool.icmp.i64.eq v8, 0x0
      nextln:   write_reg.bool v9, "z"
      nextln:   v10 = i64.signed_from_bits v8
      nextln:   v11 = i64.signed_from_bits 0x0
      nextln:   v12 = bool.icmp.int.lt v10, v11
      nextln:   write_reg.bool v12, "n"
      nextln:   v13 = i64.unsigned_from_bits v0
      nextln:   v14 = i64.unsigned_from_bits v8
      nextln:   v15 = bool.icmp.int.gt v13, v14
      nextln:   v16 = i64.unsigned_from_bits v1
      nextln:   v17 = i64.unsigned_from_bits v8
      nextln:   v18 = bool.icmp.int.gt v16, v17
      nextln:   v19 = bool.or v15, v18
      nextln:   write_reg.bool v19, "c"
      nextln:   v20 = i64.signed_from_bits v0
      nextln:   v21 = i64.signed_from_bits 0x0
      nextln:   v22 = bool.icmp.int.lt v20, v21
      nextln:   v23 = i64.signed_from_bits v1
      nextln:   v24 = i64.signed_from_bits 0x0
      nextln:   v25 = bool.icmp.int.lt v23, v24
      nextln:   v26 = bool.icmp.bool.eq v22, v25
      nextln:   v27 = bool.icmp.bool.ne v22, v12
      nextln:   v28 = bool.and v26, v27
      nextln:   write_reg.bool v28, "v"
