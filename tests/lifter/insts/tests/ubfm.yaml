tests:
- name: ubfm_1
  bytes: [0x41, 0x2c, 0x4c, 0xd3]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i64.unsigned_from_bits 0xc
      nextln:   v2 = i64.unsigned_from_bits 0xb
      nextln:   v3 = bool.icmp.int.lt v1, v2
      nextln:   jumpif v3, ubfm_positive_condition, ubfm_negative_condition
      check: block_4: // preds: ubfm_positive_condition ubfm_negative_condition
      check: ubfm_positive_condition: // preds: entry
      nextln:   v4 = i64.wrapping_add 0x1, 0xb
      nextln:   v5 = i64.wrapping_sub v4, 0xc
      nextln:   v6 = i64.wrapping_add 0xb, 0x1
      nextln:   v7 = i64.wrapping_sub 0x40, v6
      nextln:   v8 = i64.lshl v0, v7
      nextln:   v9 = i64.wrapping_sub 0x40, v5
      nextln:   v10 = i64.lshr v8, v9
      nextln:   write_reg.i64 v10, "x1"
      nextln:   jump block_4
      check: ubfm_negative_condition: // preds: entry
      nextln:   v11 = i64.wrapping_add 0xb, 0x1
      nextln:   v12 = i64.wrapping_sub 0x40, v11
      nextln:   v13 = i64.lshl v0, v12
      nextln:   v14 = i64.wrapping_sub 0x40, 0xc
      nextln:   v15 = i64.lshr v13, v14
      nextln:   write_reg.i64 v15, "x1"
      nextln:   jump block_4
- name: ubfm_2
  bytes: [0x41, 0x2c, 0x4c, 0xd3]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i64.unsigned_from_bits 0xc
      nextln:   v2 = i64.unsigned_from_bits 0xb
      nextln:   v3 = bool.icmp.int.lt v1, v2
      nextln:   jumpif v3, ubfm_positive_condition, ubfm_negative_condition
      check: block_4: // preds: ubfm_positive_condition ubfm_negative_condition
      check: ubfm_positive_condition: // preds: entry
      nextln:   v4 = i64.wrapping_add 0x1, 0xb
      nextln:   v5 = i64.wrapping_sub v4, 0xc
      nextln:   v6 = i64.wrapping_add 0xb, 0x1
      nextln:   v7 = i64.wrapping_sub 0x40, v6
      nextln:   v8 = i64.lshl v0, v7
      nextln:   v9 = i64.wrapping_sub 0x40, v5
      nextln:   v10 = i64.lshr v8, v9
      nextln:   write_reg.i64 v10, "x1"
      nextln:   jump block_4
      check: ubfm_negative_condition: // preds: entry
      nextln:   v11 = i64.wrapping_add 0xb, 0x1
      nextln:   v12 = i64.wrapping_sub 0x40, v11
      nextln:   v13 = i64.lshl v0, v12
      nextln:   v14 = i64.wrapping_sub 0x40, 0xc
      nextln:   v15 = i64.lshr v13, v14
      nextln:   write_reg.i64 v15, "x1"
      nextln:   jump block_4
