tests:
- name: test_extr_1
  bytes: [0x20, 0x30, 0xc2, 0x93]
  directives: |
      check: entry(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64, v6: i64, v7: i64, v8: i64, v9: i64, v10: i64, v11: i64, v12: i64, v13: i64, v14: i64, v15: i64, v16: i64, v17: i64, v18: i64, v19: i64, v20: i64, v21: i64, v22: i64, v23: i64, v24: i64, v25: i64, v26: i64, v27: i64, v28: i64, v29: i64, v30: i64, v31: i64, v32: i64, v33: i1, v34: i1, v35: i1, v36: i1): // entry block
      nextln:   v37 = i64.read_reg "x1"
      nextln:   v38 = i64.read_reg "x2"
      nextln:   v39 = i64.lshr v38, 0xc
      nextln:   v40 = i64.sub 0x40, 0xc
      nextln:   v41 = i64.lshl v37, v40
      nextln:   v42 = i64.or v41, v39
      nextln:   i64.write_reg v42, "x0"
- name: test_extr_2
  bytes: [0x0, 0xc8, 0xc0, 0x93]
  directives: |
      check: entry(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64, v6: i64, v7: i64, v8: i64, v9: i64, v10: i64, v11: i64, v12: i64, v13: i64, v14: i64, v15: i64, v16: i64, v17: i64, v18: i64, v19: i64, v20: i64, v21: i64, v22: i64, v23: i64, v24: i64, v25: i64, v26: i64, v27: i64, v28: i64, v29: i64, v30: i64, v31: i64, v32: i64, v33: i1, v34: i1, v35: i1, v36: i1): // entry block
      nextln:   v37 = i64.read_reg "x0"
      nextln:   v38 = i64.read_reg "x0"
      nextln:   v39 = i64.lshr v38, 0x32
      nextln:   v40 = i64.sub 0x40, 0x32
      nextln:   v41 = i64.lshl v37, v40
      nextln:   v42 = i64.or v41, v39
      nextln:   i64.write_reg v42, "x0"
- name: test_extr_3
  bytes: [0x41, 0xc, 0x83, 0x13]
  directives: |
      check: entry(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64, v6: i64, v7: i64, v8: i64, v9: i64, v10: i64, v11: i64, v12: i64, v13: i64, v14: i64, v15: i64, v16: i64, v17: i64, v18: i64, v19: i64, v20: i64, v21: i64, v22: i64, v23: i64, v24: i64, v25: i64, v26: i64, v27: i64, v28: i64, v29: i64, v30: i64, v31: i64, v32: i64, v33: i1, v34: i1, v35: i1, v36: i1): // entry block
      nextln:   v37 = i32.read_reg "x2"
      nextln:   v38 = i32.read_reg "x3"
      nextln:   v39 = i32.lshr v38, 0x3
      nextln:   v40 = i32.sub 0x20, 0x3
      nextln:   v41 = i32.lshl v37, v40
      nextln:   v42 = i32.or v41, v39
      nextln:   i32.write_reg v42, "x1"
