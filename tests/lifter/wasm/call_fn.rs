use aarch64_air_lifter::arm64::AArch64Lifter;
use aarch64_air_lifter::Lifter;
use std::io::Cursor;

#[test]
fn from_wasm() {
    let bytes = [
        0x5f, 0x23, 0x3, 0xd5, 0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x3, 0x0, 0x91, 0x50, 0x80, 0x40,
        0xf8, 0x10, 0x2, 0x40, 0xf8, 0x10, 0x82, 0x0, 0x91, 0xff, 0x63, 0x30, 0xeb, 0xc3, 0x2, 0x0,
        0x54, 0xf9, 0x6f, 0xbf, 0xa9, 0xf9, 0x3, 0x6, 0xaa, 0xfb, 0x3, 0x2, 0xaa, 0xe3, 0x3, 0x1b,
        0xaa, 0x0, 0x0, 0x0, 0x94, 0xe6, 0x3, 0x19, 0xaa, 0x4e, 0x7c, 0x6, 0x1b, 0x6f, 0x33, 0x40,
        0xf9, 0xee, 0x1, 0x0, 0xb9, 0x9, 0x0, 0x80, 0x52, 0xab, 0x0, 0x80, 0x52, 0x6b, 0x5, 0x0,
        0x51, 0x7f, 0x1, 0x0, 0x71, 0x60, 0x0, 0x0, 0x54, 0x49, 0x24, 0x6, 0x1b, 0xfc, 0xff, 0xff,
        0x17, 0x42, 0x24, 0x6, 0x1b, 0xf9, 0x6f, 0xc1, 0xa8, 0xfd, 0x7b, 0xc1, 0xa8, 0xdf, 0x23,
        0x3, 0xd5, 0xc0, 0x3, 0x5f, 0xd6, 0x1f, 0xc1, 0x0, 0x0,
    ];

    let mut cursor = Cursor::new(Vec::new());

    let lifter = AArch64Lifter::new(&bytes, &[]);
    lifter.disassemble(&mut cursor).unwrap();

    let s = String::from_utf8(cursor.into_inner()).expect("Valid UTF-8");

    assert_eq!(
        s,
        r#"0x0000:	hint #0x1a
0x0004:	stp x29, x30, [sp, #-0x10]!
0x0008:	mov x29, sp
0x000c:	ldur x16, [x2, #0x8]
0x0010:	ldur x16, [x16]
0x0014:	add x16, x16, #0x20
0x0018:	cmp sp, x16
0x001c:	b.lo $+0x58
0x0020:	stp x25, x27, [sp, #-0x10]!
0x0024:	mov x25, x6
0x0028:	mov x27, x2
0x002c:	mov x3, x27
0x0030:	bl $+0x0
0x0034:	mov x6, x25
0x0038:	mul w14, w2, w6
0x003c:	ldr x15, [x27, #0x60]
0x0040:	str w14, [x15]
0x0044:	mov w9, #0x0
0x0048:	mov w11, #0x5
0x004c:	sub w11, w11, #0x1
0x0050:	cmp w11, #0x0
0x0054:	b.eq $+0xc
0x0058:	madd w9, w2, w6, w9
0x005c:	b $-0x10
0x0060:	madd w2, w2, w6, w9
0x0064:	ldp x25, x27, [sp], #0x10
0x0068:	ldp x29, x30, [sp], #0x10
0x006c:	hint #0x1e
0x0070:	ret
0x0074:	udf #0xc11f
"#
    );
}
